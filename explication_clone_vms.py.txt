import os = module interaction avec os 
import subprocess = execut command os ( virsh, virt-install, etc )
import time = mettre des pauses ( sleep )

CONFIG_FILE = Chemin du config_vms.conf
DISK_DIR = Dossier ou sont stock√©s les qcow2 

if not os.path.isfile(CONFIG_FILE):  = si le fichier CONFIG_FILE n'existe pas 
    print(f"\u274C Le fichier {CONFIG_FILE} n'existe pas.") = imprime ...
    exit(1) = quitte avec le code erreur 1 
    
==> os.path.isfile() = Verification du fichier
	\u274c = code Unicode pour X (afficher croix rouge) 


with open(CONFIG_FILE, 'r') as config_file: = Ouvre le dichier en mode lecture
    for line in config_file: = Boucle qui lit chaque ligne du fichier 

==> open(CONFIG_FILE, 'r') = Ouvre le fichier en mode lecture('r'=read)
	with = Assure que le fichier sera bien ferm√© apr√®s l'utilisation


     line = line.strip()  = supprime les espaces inutiles au d√©but et √† la fin de la ligne
     if not line or line.startswith('#'): = si la ligne est vide, on l'ignore / Si la ligne commence par #, on l'ignore 
        continue
        
      values = line.split() = D√©coupe la ligne en une liste de mots (s√©par√©s par des espaces)
      if len(values) != 6:  =V√©rifie qu'il y a bien 6 valeurs
         print("‚ùå Erreur : Ligne invalide dans le fichier de configuration.")
         continue  = si ce n'est pas le cas, affiche une erreur et continue
         
      VM_SOURCE, VM_TARGET_PREFIX, N_CLONES, NETWORK, RAM, VCPU = values  = Associe les 6 √©l√©ments aux variables correspondantes
      
      try:
          N_CLONES = int(N_CLONES)
          RAM = int(RAM)
          VCPU = int(VCPU)  = convertit Valeurs en entiers
      except ValueError:  = si une conversion √©choue -> print
          print("‚ùå Erreur : Les valeurs num√©riques ne sont pas correctes.")
          continue

      print(f"üöÄ Clonage de {VM_SOURCE} avec pr√©fixe {VM_TARGET_PREFIX} ({N_CLONES} clones)")
      print(f"‚û°Ô∏è  R√©seau : {NETWORK} | RAM : {RAM}MB | vCPU : {VCPU}")


      result = subprocess.run(["virsh", "list", "--all"], capture_output=True, text=True)
      if VM_SOURCE not in result.stdout: = V√©rifie si VM_SOURCE est dans la sortie (result.stdout) sinon -> erreur
          print(f"‚ùå Erreur : La VM {VM_SOURCE} n'existe pas !")
          continue

==> subprocess.run(["virsh", "list", "--all"] = Execute la commande virsh list --all pour lister les VM
	capture_output=True = capture la sortie de la commande
	text=True = formate la sortie en texte lisible
	
	  
	   for i in range(1, N_CLONES + 1): = boucle pour chaque clone(de 1 √† N_CLONES)
			VM_TARGET = f"{VM_TARGET_PREFIX}-{i}" = Nom du clone
			DISK_SOURCE = os.path.join(DISK_DIR, f"{VM_SOURCE}.qcow2") = Emplacement du disque source
			DISK_TARGET = os.path.join(DISK_DIR, f"{VM_TARGET}.qcow2") = Emplacement du disque clon√©
          
            if not os.path.isfile(DISK_SOURCE): = V√©rifie si le fichier .qcow2 de la VM source existe
                print(f"‚ùå Erreur : Le fichier source {DISK_SOURCE} n'existe pas !")
                continue

            subprocess.run(["cp", DISK_SOURCE, DISK_TARGET]) = execute la commande "cp" pour copier le disque source

            result = subprocess.run([
                "virt-install", "--name", VM_TARGET,
                "--ram", str(RAM),
                "--vcpus", str(VCPU),
                "--disk", f"path={DISK_TARGET},format=qcow2",
                "--network", f"network={NETWORK}",
                "--os-variant", "ubuntu22.04",
                "--graphics", "none",
                "--import",
                "--noautoconsole"
            ]) = virt-install cr√©e une machine virtuelle, sp√©cifie la ram, cpu,disque,r√©seau,os,sans interface graphique
            
            subprocess.run(["virsh", "start", VM_TARGET]) = d√©marre la machine virtuelle avec birsh start
            
            time.sleep(5) = Attache l'interface r√©seau √† la VM apr√®s 5 secondes d'attente (sinon probleme de lancement)
            subprocess.run(["virsh", "attach-interface", "--domain", VM_TARGET, "--type", "network", "--source", NETWORK, "--config", "--live"])


